# 📂 .github/workflows/ci.yml
name: Go CI

on:
  push:
  pull_request:
  # Optional: schedule nightly checks
  # schedule:
  #   - cron: '0 2 * * *'

jobs:
  test-build-lint:
    runs-on: ubuntu-latest

    env:
      AIRTABLE_BASE_ID: dummy
      AIRTABLE_MEDICINES_TABLE: dummy
      AIRTABLE_ENTRIES_TABLE: dummy
      AIRTABLE_TOKEN: dummy
      TELEGRAM_BOT_TOKEN: dummy
      TELEGRAM_CHAT_ID: dummy
      ENABLE_ENTRY_POST: false
      ENABLE_ALERT_TICKER: false
      ENABLE_TELEGRAM_POLLING: false

    defaults:
      run:
        working-directory: backend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🛠 Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: 🔍 Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: 📦 Ensure dependencies are installed
        run: |
          go mod tidy
          go mod download

      - name: ✅ Run unit tests
        run: go test -v ./...

      - name: 🧪 Generate test coverage
        run: |
          go test -coverprofile=coverage.txt ./...
          ls -lah .
          test -f coverage.txt

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.txt
          flags: backend
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

      - name: 🧱 Build binary
        run: go build ./...

      - name: 🧹 Run golangci-lint
        uses: golangci/golangci-lint-action@v5
        with:
          version: v1.57.2
          working-directory: backend
          args: --timeout=3m --format=github-actions ./...

      # Optional: security scanning
      # - name: 🔐 Run gosec for static security analysis
      #   uses: securego/gosec@v2
      #   with:
      #     args: ./...

  docker-build:
    runs-on: ubuntu-latest
    needs: test-build-lint

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Docker Build
        run: docker build -f Dockerfile -t vitaltrack .

      - name: 🏷️ Tag Docker image
        run: |
          GIT_TAG=$(git describe --tags --abbrev=0 || echo latest)
          docker tag vitaltrack nomenarkt/vitaltrack:$GIT_TAG

      # Optional: Docker Hub push (enable only if credentials are added to secrets)
      # - name: 🔐 Login to Docker Hub
      #   run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # - name: 📤 Push Docker image
      #   run: |
      #     GIT_TAG=$(git describe --tags --abbrev=0 || echo latest)
      #     docker push nomenarkt/vitaltrack:$GIT_TAG
